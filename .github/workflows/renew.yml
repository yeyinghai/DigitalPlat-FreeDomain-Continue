# 这是与最终版 renew.py 脚本配套的 GitHub Actions 工作流文件。

name: Renew DigitalPlat Free Domains

on:
  # 定时触发器：
  # 使用 cron 语法，表示在每隔15天的 08:00 (UTC时间) 运行一次。
  # 免费域名通常有效期为30天，每15天检查一次可以确保及时续期。
  schedule:
    - cron: '0 8 */15 * *'
  
  # 手动触发器：
  # 允许您在 GitHub 仓库的 "Actions" 页面手动点击按钮来运行此工作流，非常方便进行测试。
  workflow_dispatch:

jobs:
  renew:
    # 运行环境：使用 GitHub 提供的最新版 Ubuntu 虚拟机
    runs-on: ubuntu-latest
    
    steps:
      # 第1步：检出代码
      # 将您仓库中的代码下载到虚拟机中，以便后续步骤使用。
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第2步：设置 Python 环境
      # 安装指定版本的 Python (这里使用 3.10)。
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 第3步：安装 Python 依赖库
      # 读取 requirements.txt 文件，并使用 pip 安装所有必需的库 (playwright, requests)。
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 第4步：安装 Playwright 浏览器及其系统依赖
      # 这是运行 Playwright 的关键步骤！
      # 它会下载 Chromium 浏览器核心，并安装运行它所需要的所有系统库。
      - name: Install Playwright browsers and dependencies
        run: playwright install --with-deps chromium

      # 第5步：运行续期脚本
      # 执行我们的核心 Python 脚本。
      - name: Run Renewal Script
        # 通过 env 块，将您在 GitHub Secrets 中配置的值安全地作为环境变量传递给 Python 脚本。
        # 脚本中的 os.getenv() 函数会读取这些值。
        env:
          DP_EMAIL: ${{ secrets.DP_EMAIL }}
          DP_PASSWORD: ${{ secrets.DP_PASSWORD }}
          BARK_KEY: ${{ secrets.BARK_KEY }}
          BARK_SERVER: ${{ secrets.BARK_SERVER }} # 即使此 Secret 未设置，这里也不会报错，脚本会收到一个空字符串。
        run: python renew.py

      # 第6步：上传错误截图（仅在任务失败时）
      # 这是一个非常有用的调试步骤。
      # `if: failure()` 表示只有当前面的步骤执行失败时，才会运行这一步。
      # 它会将脚本生成的 'error_screenshot.png' 文件打包上传到本次运行的 "Artifacts" (构建产物) 中。
      # 您可以从 Actions 运行记录页面下载它，以查看脚本失败时的界面。
      - name: Upload error screenshot
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-screenshot
          path: error_screenshot.png
